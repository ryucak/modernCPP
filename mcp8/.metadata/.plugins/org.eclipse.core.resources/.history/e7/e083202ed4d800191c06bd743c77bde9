/*
 * 71.cpp
 *
 *  Created on: 2019/09/17
 *      Author: hhhhh
 */

#include <list>
#include <vector>
#include <string>
#include <iostream>

enum class event{
	add_item = 0,
	remove_item,
	clear_all_item,
	copy_from_else,
};

class listner {
	std::vector<std::string> event_str = {
			"add",
			"remove",
			"clear",
			"copy"
	};
public:
	listner(std::vector<std::string> msgs){
		event_str = msgs;
	}
	void event_handler(event evt){
		std::cout << event_str[static_cast<int>(evt)] << std::endl;
	}
};

class observer {
	std::list<listner> listners;
public:
	void notify_event(event evt){
		for(auto lis : listners){
			lis.event_handler(evt);
		}
	}
	void add_listner(listner lis){
		listners.push_back(lis);
	}
};

template<typename T>
class observed_vector : std::vector<T> {
	observer obs;

public:
	observed_vector : std::vector<T>;
	observed_vector(observed_vector& other){
		obs.notify_event(event::copy_from_else);
		*this = other;
	}
	observed_vector(std::vector<T>& v){
		this->vec = v;
	}
	void add_listner(listner l){
		obs.add_listner(l);
	}
	observed_vector& operator=(observed_vector &other){
		return observed_vector(other);
	}
	void push_back(T v){
		obs.notify_event(event::add_item);
		this->push_back(v);
	}
	void pop_back(void){
		obs.notify_event(event::remove_item);
		this->pop_back();
	}
	void clear(void){
		obs.notify_event(event::clear_all_item);
		this->clear();
	}
};

int main(int argc, char **argv) {
	observed_vector<int> ov;
	listner lis;
	listner lis2({
		"あど",
		"りむ",
		"くり",
		"こぴ",
	});
	ov.add_listner(lis);
	ov.add_listner(lis2);

	ov.push_back(1);
	ov.push_back(3);

	if(!ov.empty()){
		std::cout << "has item" << std::endl;
	}
	ov.pop_back();

	observed_vector ov2 = ov;

	ov.clear();
}

