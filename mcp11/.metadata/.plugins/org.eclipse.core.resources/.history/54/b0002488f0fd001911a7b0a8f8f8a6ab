/*
 * 89.cpp
 *
 *  Created on: 2019/11/03
 *      Author: hhhhh
 */
#include <iostream>
#include <string>
#include <functional>

class vignere{
	std::string key;
	char to_cipher(char c, char k){
		return c + (k - "A");
	}
	char to_clear(char c, char k){
		return c - (k - "A");
	}
	std::string crypt(std::string in, std::function<char(char,char)> f)
	{
		std::string out;

		for (int i = 0; i < in.length(); ++i) {
			char c = in.c_str()[i];
			if(isalpha(c) && isupper(c)){
				c = f(c,key.c_str()[i%key.length()]);
			}
			out.append(c);
		}
		return out;
	}
public:
	vignere(std::string key){
		this->key = key;
	};

	std::string encrypt(std::string clr){
		return crypt(clr,to_cipher);
	}
	std::string decrypt(std::string cpr){
		return crypt(cpr,to_clear);
	}
};


std::string vigenere_encrypt(std::string clr, std::string key)
{
	std::string cph = "";


	return cph;
}

std::string vigenere_decrypt(std::string cph, std::string key)
{
	std::string clr = "";

	for (int i = 0; i < clr.length(); ++i) {
		char c = clr.c_str()[i];
		if(isalpha(c) && isupper(c)){
			c -= key.c_str()[i%key.length()];
		}
	}

	return clr;
}


int main(int argc, char **argv) {
	std::string hoge;

	std::cin >> hoge;

	std::string hoge_crypt = vigenere_encrypt(hoge,"ARM");
	std::cout <<  << std::endl;

	return 0;
}


