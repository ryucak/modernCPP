/*
 * array2d.h
 *
 *  Created on: 2019/05/20
 *      Author: hhhhh
 */

#ifndef ARRAY2D_H_
#define ARRAY2D_H_

#include <vector>
#include <initializer_list>

template<class T,int H, int V>
class array2d {
	std::vector<T> array;

public:
	array2d():array(H,V){}
	array2d(std::initializer_list<t> list):array(list){}

	T &at(std::size_t r, std::size_t c){
		return array.at(r*H,c);
	}
	T& operator()(std::size_t const r, std::size_t const c){
		return at(r,c);
	}
	T* begin() {return array.data();}
	T* end() {return array.data() + array.size();}

	void fill(T val){std::fill(std::begin(array),std::end(array),val);}
	void swap(array2d a){array.swap(a.array);}

	virtual ~array2d(){}
};

#endif /* ARRAY2D_H_ */
